<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https:endofhome.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https:endofhome.github.io/" rel="alternate" type="text/html" /><updated>2019-05-03T12:29:09+01:00</updated><id>https:endofhome.github.io/feed.xml</id><title type="html">Tom Barnsbury</title><subtitle>Tech tips, musings, learnings from a perpetual noob.</subtitle><entry><title type="html">Extending dummy objects in Kotlin</title><link href="https:endofhome.github.io/2019/04/03/extending_dummy_objects_in_kotlin.html" rel="alternate" type="text/html" title="Extending dummy objects in Kotlin" /><published>2019-04-03T12:12:01+01:00</published><updated>2019-04-03T12:12:01+01:00</updated><id>https:endofhome.github.io/2019/04/03/extending_dummy_objects_in_kotlin</id><content type="html" xml:base="https:endofhome.github.io/2019/04/03/extending_dummy_objects_in_kotlin.html">&lt;p&gt;Often when testing software we want to construct an object which is dependent on other objects or functions, but we know that this code dependency is not a concern of our test. In these situations it is nice to use the simplest possible test double, classified by Martin Fowler as a &lt;a href=&quot;https://www.martinfowler.com/articles/mocksArentStubs.html&quot;&gt;&lt;em&gt;dummy&lt;/em&gt;&lt;/a&gt;. If this double is a class with member functions (also known as methods), none of these functions will have any behaviour. It might look something like this:&lt;/p&gt;

&lt;p&gt;For a given interface of &lt;code class=&quot;highlighter-rouge&quot;&gt;FileStorage&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileStorage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;a basic dummy might look like this&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DummyFileStorage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileStorage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not implemented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not implemented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not implemented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In other test situations we might want other types of test double. These could be stubs, spies, fakes or mocks, depending on the style of testing we deem appropriate. It is quite common that we might need for example, a stub, but our test is only concerned with one member function. We can duplicate the dummy and give only this function the behaviour we desire, but this can lead to a lot of code duplication, especially if we have complicated objects (not that complicated objects are desirable, but I’m sure we’ve all been in this situation).
If we are testing a collaborator of &lt;code class=&quot;highlighter-rouge&quot;&gt;FileStorage&lt;/code&gt; who calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;listFiles&lt;/code&gt; function, a basic stub for our &lt;code class=&quot;highlighter-rouge&quot;&gt;FileStorage&lt;/code&gt; interface might look like this:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StubFileStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileStorage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileNames&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not implemented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not implemented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Kotlin provides us with a nice way to extend such dummy classes.
If we replace our dummy object with an &lt;em&gt;open class&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DummyFileStorage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileStorage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not implemented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not implemented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not implemented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we can now extend the dummy, and only stub the method we care about:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StubFileStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DummyFileStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileNames&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the usage is isolated to one particular area of our code, and we don’t need any constructor parameters for our stub, we can even inline it as an anonymous object and assign it to a variable:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stubFileStorage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DummyFileStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not sure where this pattern originated (I think I was first shown it by &lt;a href=&quot;https://twitter.com/dmitrykandalov&quot;&gt;Dmitry Kandalov&lt;/a&gt; or &lt;a href=&quot;https://github.com/PriyoAujla&quot;&gt;Pryio Aujla&lt;/a&gt;) but I don’t see it in use much and I think it’s quite useful.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links:&lt;/h2&gt;
&lt;p&gt;Test double definitions: &lt;a href=&quot;https://www.martinfowler.com/articles/mocksArentStubs.html&quot;&gt;Mocks Aren’t Stubs &lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Often when testing software we want to construct an object which is dependent on other objects or functions, but we know that this code dependency is not a concern of our test. In these situations it is nice to use the simplest possible test double, classified by Martin Fowler as a dummy. If this double is a class with member functions (also known as methods), none of these functions will have any behaviour. It might look something like this:</summary></entry><entry><title type="html">Compiling id3mtag for macOS</title><link href="https:endofhome.github.io/2019/01/11/compiling_id3mtag_for_macos.html" rel="alternate" type="text/html" title="Compiling id3mtag for macOS" /><published>2019-01-11T11:22:01+00:00</published><updated>2019-01-11T11:22:01+00:00</updated><id>https:endofhome.github.io/2019/01/11/compiling_id3mtag_for_macos</id><content type="html" xml:base="https:endofhome.github.io/2019/01/11/compiling_id3mtag_for_macos.html">&lt;p&gt;I’m working on a project which involves tagging some mp3 files using the id3v2 spec. Rather than write one myself, I thought (errantly) that it would be easy to find a command line tool for macOS that I could use in a shell script. It’s true that there are several out there, but they all had limitations. These range from randomly limiting text fields to 254 characters (a limitation not found in the id3v2 spec), not being able to write comment tags (which is necessary for my project) and not being able to write id3v2 at all. I also came across a promising looking open source tool, written primarily in c++: &lt;a href=&quot;https://squell.github.io/id3/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id3mtag&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The tool isn’t available in Homebrew and the author does not make a pre-built binary for macOS available. So I thought I’d try to compile it myself. Should be no big deal, I thought. I’m a &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; noob, and I’ve never written a line of c++ in life. My confidence was not well founded. Here’s what happened.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make -f makefile
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c main.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c sedit.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c varexp.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c fileexp.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c charconv.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c mass_tag.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c pattern.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c setid3.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c getid3.cpp
cc -g -Os -pedantic -Wformat -Wno-parentheses -c id3v1.c
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c setid3v2.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c getid3v2.cpp
cc -g -Os -pedantic -Wformat -Wno-parentheses -c id3v2.c
cc -g -Os -pedantic -Wformat -Wno-parentheses -c fileops.c
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c char_ucs.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c char_utf8.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c setlyr3.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c getlyr3.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c lyrics3.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c setfname.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c setquery.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses -c dumptag.cpp
c++ -g -Os -pedantic  -fno-rtti -Wformat -Wno-parentheses main.o sedit.o varexp.o fileexp.o charconv.o mass_tag.o pattern.o setid3.o getid3.o id3v1.o setid3v2.o getid3v2.o id3v2.o fileops.o char_ucs.o char_utf8.o setlyr3.o getlyr3.o lyrics3.o setfname.o setquery.o dumptag.o  -o id3
Undefined symbols for architecture x86_64:
  &quot;_iconv&quot;, referenced from:
      charset::recode(char*, unsigned long, void const*, unsigned long, char const*, char const*, bool, unsigned long) in charconv.o
  &quot;_iconv_close&quot;, referenced from:
      charset::recode(char*, unsigned long, void const*, unsigned long, char const*, char const*, bool, unsigned long) in charconv.o
  &quot;_iconv_open&quot;, referenced from:
      charset::recode(char*, unsigned long, void const*, unsigned long, char const*, char const*, bool, unsigned long) in charconv.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make: *** [id3] Error 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Argh!&lt;/p&gt;

&lt;p&gt;Knowing that macOS is based on FreeBSD I attempted to use the &lt;a href=&quot;https://github.com/squell/id3/blob/master/FreeBSD/Makefile&quot;&gt;FreeBSD Makefile&lt;/a&gt; included with the source code. It failed in a completely different way. However, studying the file I noticed these lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;USES=   iconv

CFLAGS+=  -I${ICONV_INCLUDE_PATH}
LDFLAGS+= -L${ICONV_PREFIX}/lib ${ICONV_LIB}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not going to lie and pretend I understand the problem. It seems to be based around Apple providing their own &lt;code class=&quot;highlighter-rouge&quot;&gt;iconv&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib&lt;/code&gt; (there are three possible culprits on my system, &lt;code class=&quot;highlighter-rouge&quot;&gt;libiconv.2.4.0.dylib&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;libiconv.2.dylib&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libiconv.dylib&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This document was also useful in helping me figure out what the values for the &lt;code class=&quot;highlighter-rouge&quot;&gt;ICONV_*&lt;/code&gt; variables should be: &lt;a href=&quot;https://www.freebsd.org/doc/en/books/porters-handbook/using-iconv.html&quot;&gt;https://www.freebsd.org/doc/en/books/porters-handbook/using-iconv.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution:&lt;/h2&gt;

&lt;p&gt;Install iconv (I used brew):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install libiconv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ iconv --version
iconv (GNU libiconv 1.11)
Copyright (C) 2000-2006 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Written by Bruno Haible.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ which iconv
/usr/bin/iconv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modify the generic &lt;a href=&quot;https://github.com/squell/id3/blob/master/makefile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;makefile&lt;/code&gt;&lt;/a&gt; provided by the author. (I added a single line below each &lt;code class=&quot;highlighter-rouge&quot;&gt;# added&lt;/code&gt; comment)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# added
USES= iconv

CFLAGS   ?= -g -Os -pedantic
CFLAGS   += $(WARNINGS:%=-W%)

# added
CFLAGS+=        -I/usr/bin

CXXFLAGS ?= $(DEFFLAGS)
CXXFLAGS += -fno-rtti $(WARNINGS:%=-W%)
LDFLAGS  ?=

# added
LDFLAGS  += -L/usr/bin -liconv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now try to compile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make -f makefile
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c main.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c sedit.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c varexp.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c fileexp.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c charconv.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c mass_tag.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c pattern.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c setid3.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c getid3.cpp
cc -g -Os -pedantic -Wformat -Wno-parentheses -I/usr/bin -c id3v1.c
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c setid3v2.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c getid3v2.cpp
cc -g -Os -pedantic -Wformat -Wno-parentheses -I/usr/bin -c id3v2.c
cc -g -Os -pedantic -Wformat -Wno-parentheses -I/usr/bin -c fileops.c
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c char_ucs.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c char_utf8.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c setlyr3.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c getlyr3.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c lyrics3.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c setfname.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c setquery.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses -c dumptag.cpp
c++ -g -Os -pedantic  -I/usr/bin -fno-rtti -Wformat -Wno-parentheses main.o sedit.o varexp.o fileexp.o charconv.o mass_tag.o pattern.o setid3.o getid3.o id3v1.o setid3v2.o getid3v2.o id3v2.o fileops.o char_ucs.o char_utf8.o setlyr3.o getlyr3.o lyrics3.o setfname.o setquery.o dumptag.o  -L/usr/bin -liconv  -o id3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks good! Now to install:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo make install
install -d /usr/local/bin /usr/local/man/man1
install -m 644 id3.man /usr/local/man/man1/id3.1
install id3 /usr/local/bin/id3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ id3 --version
id3 0.80 (2016005), Copyright (C) 2003, 04, 05, 06, 15 Marc R. Schoolderman
This program comes with ABSOLUTELY NO WARRANTY.

This is free software, and you are welcome to redistribute it
under certain conditions; see the file named COPYING in the
source distribution for details.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After trying multiple different tagging tools (I’m particularly looking at you, &lt;code class=&quot;highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;id3mtag&lt;/code&gt; works wonderfully. I suspect there’s a better solution to this problem, and perhaps one day I will find out what it is - but for now, I’m satisfied.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links:&lt;/h2&gt;
&lt;p&gt;id3mtag: &lt;a href=&quot;https://squell.github.io/id3/&quot;&gt;https://squell.github.io/id3/&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m working on a project which involves tagging some mp3 files using the id3v2 spec. Rather than write one myself, I thought (errantly) that it would be easy to find a command line tool for macOS that I could use in a shell script. It’s true that there are several out there, but they all had limitations. These range from randomly limiting text fields to 254 characters (a limitation not found in the id3v2 spec), not being able to write comment tags (which is necessary for my project) and not being able to write id3v2 at all. I also came across a promising looking open source tool, written primarily in c++: id3mtag.</summary></entry></feed>